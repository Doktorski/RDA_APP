//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RDA_APP.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RDAEntities : DbContext
    {
        public RDAEntities()
            : base("name=RDAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Agencija> Agencija { get; set; }
        public virtual DbSet<Cenovnik> Cenovnik { get; set; }
        public virtual DbSet<Grad> Grad { get; set; }
        public virtual DbSet<Kanali> Kanali { get; set; }
        public virtual DbSet<Kompanija> Kompanija { get; set; }
        public virtual DbSet<MSpeer_conflictdetectionconfigrequest> MSpeer_conflictdetectionconfigrequest { get; set; }
        public virtual DbSet<MSpeer_lsns> MSpeer_lsns { get; set; }
        public virtual DbSet<Narudzbenica> Narudzbenica { get; set; }
        public virtual DbSet<Odbor> Odbor { get; set; }
        public virtual DbSet<Politicka_stranka> Politicka_stranka { get; set; }
        public virtual DbSet<Pozicija_zaposlenog> Pozicija_zaposlenog { get; set; }
        public virtual DbSet<Prikazuje> Prikazuje { get; set; }
        public virtual DbSet<Privredna_grana> Privredna_grana { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<Reklama> Reklama { get; set; }
        public virtual DbSet<Stavka_narudzenice> Stavka_narudzenice { get; set; }
        public virtual DbSet<Struktura_vlasnistva> Struktura_vlasnistva { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<sysreplservers> sysreplservers { get; set; }
        public virtual DbSet<Tip_reklame> Tip_reklame { get; set; }
        public virtual DbSet<TV_kuca> TV_kuca { get; set; }
        public virtual DbSet<Zaposleni> Zaposleni { get; set; }
        public virtual DbSet<MSpeer_conflictdetectionconfigresponse> MSpeer_conflictdetectionconfigresponse { get; set; }
        public virtual DbSet<MSpeer_originatorid_history> MSpeer_originatorid_history { get; set; }
        public virtual DbSet<MSpeer_request> MSpeer_request { get; set; }
        public virtual DbSet<MSpeer_response> MSpeer_response { get; set; }
        public virtual DbSet<MSpeer_topologyrequest> MSpeer_topologyrequest { get; set; }
        public virtual DbSet<MSpeer_topologyresponse> MSpeer_topologyresponse { get; set; }
        public virtual DbSet<MSpub_identity_range> MSpub_identity_range { get; set; }
        public virtual DbSet<sysarticlecolumns> sysarticlecolumns { get; set; }
        public virtual DbSet<sysarticles> sysarticles { get; set; }
        public virtual DbSet<sysarticleupdates> sysarticleupdates { get; set; }
        public virtual DbSet<syspublications> syspublications { get; set; }
        public virtual DbSet<sysschemaarticles> sysschemaarticles { get; set; }
        public virtual DbSet<syssubscriptions> syssubscriptions { get; set; }
        public virtual DbSet<systranschemas> systranschemas { get; set; }
        public virtual DbSet<sysextendedarticlesview> sysextendedarticlesview { get; set; }
        public virtual DbSet<View_Dim_Odbor> View_Dim_Odbor { get; set; }
        public virtual DbSet<View_Dim_Region> View_Dim_Region { get; set; }
        public virtual DbSet<View_Dim_TV_kanali> View_Dim_TV_kanali { get; set; }
        public virtual DbSet<View_Dim_Zaposleni> View_Dim_Zaposleni { get; set; }
    
        public virtual int Insert_Agencija(string naziv, string srediste, string adresa, string telefon, string email)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var sredisteParameter = srediste != null ?
                new ObjectParameter("Srediste", srediste) :
                new ObjectParameter("Srediste", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Agencija", nazivParameter, sredisteParameter, adresaParameter, telefonParameter, emailParameter);
        }
    
        public virtual int Insert_Cenovnik(Nullable<System.DateTime> cenaVazenjaOd, Nullable<System.DateTime> cenaVazenjaDo, Nullable<int> cena)
        {
            var cenaVazenjaOdParameter = cenaVazenjaOd.HasValue ?
                new ObjectParameter("CenaVazenjaOd", cenaVazenjaOd) :
                new ObjectParameter("CenaVazenjaOd", typeof(System.DateTime));
    
            var cenaVazenjaDoParameter = cenaVazenjaDo.HasValue ?
                new ObjectParameter("CenaVazenjaDo", cenaVazenjaDo) :
                new ObjectParameter("CenaVazenjaDo", typeof(System.DateTime));
    
            var cenaParameter = cena.HasValue ?
                new ObjectParameter("Cena", cena) :
                new ObjectParameter("Cena", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Cenovnik", cenaVazenjaOdParameter, cenaVazenjaDoParameter, cenaParameter);
        }
    
        public virtual int Insert_Grad(Nullable<int> region_ID, string naziv)
        {
            var region_IDParameter = region_ID.HasValue ?
                new ObjectParameter("Region_ID", region_ID) :
                new ObjectParameter("Region_ID", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Grad", region_IDParameter, nazivParameter);
        }
    
        public virtual int Insert_Kanali(Nullable<int> tV_kuca_ID, string naziv)
        {
            var tV_kuca_IDParameter = tV_kuca_ID.HasValue ?
                new ObjectParameter("TV_kuca_ID", tV_kuca_ID) :
                new ObjectParameter("TV_kuca_ID", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Kanali", tV_kuca_IDParameter, nazivParameter);
        }
    
        public virtual int Insert_Kompanija(string naziv, string sifra, string sediste)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var sifraParameter = sifra != null ?
                new ObjectParameter("Sifra", sifra) :
                new ObjectParameter("Sifra", typeof(string));
    
            var sedisteParameter = sediste != null ?
                new ObjectParameter("Sediste", sediste) :
                new ObjectParameter("Sediste", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Kompanija", nazivParameter, sifraParameter, sedisteParameter);
        }
    
        public virtual int Insert_Narudzbenica(Nullable<int> zaposleni_ID, Nullable<int> kompanija_ID, Nullable<int> broj_narudzbenice, Nullable<System.DateTime> datum)
        {
            var zaposleni_IDParameter = zaposleni_ID.HasValue ?
                new ObjectParameter("Zaposleni_ID", zaposleni_ID) :
                new ObjectParameter("Zaposleni_ID", typeof(int));
    
            var kompanija_IDParameter = kompanija_ID.HasValue ?
                new ObjectParameter("Kompanija_ID", kompanija_ID) :
                new ObjectParameter("Kompanija_ID", typeof(int));
    
            var broj_narudzbeniceParameter = broj_narudzbenice.HasValue ?
                new ObjectParameter("Broj_narudzbenice", broj_narudzbenice) :
                new ObjectParameter("Broj_narudzbenice", typeof(int));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Narudzbenica", zaposleni_IDParameter, kompanija_IDParameter, broj_narudzbeniceParameter, datumParameter);
        }
    
        public virtual int Insert_Odbor(Nullable<int> grad_ID, Nullable<int> politicka_stranka_ID, string naziv, string oznaka)
        {
            var grad_IDParameter = grad_ID.HasValue ?
                new ObjectParameter("Grad_ID", grad_ID) :
                new ObjectParameter("Grad_ID", typeof(int));
    
            var politicka_stranka_IDParameter = politicka_stranka_ID.HasValue ?
                new ObjectParameter("Politicka_stranka_ID", politicka_stranka_ID) :
                new ObjectParameter("Politicka_stranka_ID", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var oznakaParameter = oznaka != null ?
                new ObjectParameter("Oznaka", oznaka) :
                new ObjectParameter("Oznaka", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Odbor", grad_IDParameter, politicka_stranka_IDParameter, nazivParameter, oznakaParameter);
        }
    
        public virtual int Insert_Politicka_stranka(string naziv, string mesto, string opstina, string adresa)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var mestoParameter = mesto != null ?
                new ObjectParameter("Mesto", mesto) :
                new ObjectParameter("Mesto", typeof(string));
    
            var opstinaParameter = opstina != null ?
                new ObjectParameter("Opstina", opstina) :
                new ObjectParameter("Opstina", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Politicka_stranka", nazivParameter, mestoParameter, opstinaParameter, adresaParameter);
        }
    
        public virtual int Insert_Pozicija_zaposlenog(string pozicija)
        {
            var pozicijaParameter = pozicija != null ?
                new ObjectParameter("Pozicija", pozicija) :
                new ObjectParameter("Pozicija", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Pozicija_zaposlenog", pozicijaParameter);
        }
    
        public virtual int Insert_Prikazuje(Nullable<int> kanali_ID, Nullable<int> reklama_ID, Nullable<System.DateTime> termin_prikaza_Od, Nullable<System.DateTime> termin_prikaza_Do, Nullable<int> broj_prikaza)
        {
            var kanali_IDParameter = kanali_ID.HasValue ?
                new ObjectParameter("Kanali_ID", kanali_ID) :
                new ObjectParameter("Kanali_ID", typeof(int));
    
            var reklama_IDParameter = reklama_ID.HasValue ?
                new ObjectParameter("Reklama_ID", reklama_ID) :
                new ObjectParameter("Reklama_ID", typeof(int));
    
            var termin_prikaza_OdParameter = termin_prikaza_Od.HasValue ?
                new ObjectParameter("Termin_prikaza_Od", termin_prikaza_Od) :
                new ObjectParameter("Termin_prikaza_Od", typeof(System.DateTime));
    
            var termin_prikaza_DoParameter = termin_prikaza_Do.HasValue ?
                new ObjectParameter("Termin_prikaza_Do", termin_prikaza_Do) :
                new ObjectParameter("Termin_prikaza_Do", typeof(System.DateTime));
    
            var broj_prikazaParameter = broj_prikaza.HasValue ?
                new ObjectParameter("Broj_prikaza", broj_prikaza) :
                new ObjectParameter("Broj_prikaza", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Prikazuje", kanali_IDParameter, reklama_IDParameter, termin_prikaza_OdParameter, termin_prikaza_DoParameter, broj_prikazaParameter);
        }
    
        public virtual int Insert_Privredna_grana(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Privredna_grana", nazivParameter);
        }
    
        public virtual int Insert_Region(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Region", nazivParameter);
        }
    
        public virtual int Insert_Reklama(Nullable<int> odbor_ID, Nullable<int> tip_reklame_ID, Nullable<int> priv_grana_ID, Nullable<int> agencija_ID, Nullable<int> cenovnik_ID, string naziv, string sifra, Nullable<int> duzina_trajanja)
        {
            var odbor_IDParameter = odbor_ID.HasValue ?
                new ObjectParameter("Odbor_ID", odbor_ID) :
                new ObjectParameter("Odbor_ID", typeof(int));
    
            var tip_reklame_IDParameter = tip_reklame_ID.HasValue ?
                new ObjectParameter("Tip_reklame_ID", tip_reklame_ID) :
                new ObjectParameter("Tip_reklame_ID", typeof(int));
    
            var priv_grana_IDParameter = priv_grana_ID.HasValue ?
                new ObjectParameter("Priv_grana_ID", priv_grana_ID) :
                new ObjectParameter("Priv_grana_ID", typeof(int));
    
            var agencija_IDParameter = agencija_ID.HasValue ?
                new ObjectParameter("Agencija_ID", agencija_ID) :
                new ObjectParameter("Agencija_ID", typeof(int));
    
            var cenovnik_IDParameter = cenovnik_ID.HasValue ?
                new ObjectParameter("Cenovnik_ID", cenovnik_ID) :
                new ObjectParameter("Cenovnik_ID", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var sifraParameter = sifra != null ?
                new ObjectParameter("Sifra", sifra) :
                new ObjectParameter("Sifra", typeof(string));
    
            var duzina_trajanjaParameter = duzina_trajanja.HasValue ?
                new ObjectParameter("Duzina_trajanja", duzina_trajanja) :
                new ObjectParameter("Duzina_trajanja", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Reklama", odbor_IDParameter, tip_reklame_IDParameter, priv_grana_IDParameter, agencija_IDParameter, cenovnik_IDParameter, nazivParameter, sifraParameter, duzina_trajanjaParameter);
        }
    
        public virtual int Insert_Stavka_narudzenice(Nullable<int> reklama_ID, Nullable<int> narudzbenica_ID, Nullable<int> kolicina)
        {
            var reklama_IDParameter = reklama_ID.HasValue ?
                new ObjectParameter("Reklama_ID", reklama_ID) :
                new ObjectParameter("Reklama_ID", typeof(int));
    
            var narudzbenica_IDParameter = narudzbenica_ID.HasValue ?
                new ObjectParameter("Narudzbenica_ID", narudzbenica_ID) :
                new ObjectParameter("Narudzbenica_ID", typeof(int));
    
            var kolicinaParameter = kolicina.HasValue ?
                new ObjectParameter("Kolicina", kolicina) :
                new ObjectParameter("Kolicina", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Stavka_narudzenice", reklama_IDParameter, narudzbenica_IDParameter, kolicinaParameter);
        }
    
        public virtual int Insert_Struktura_vlasnistva(string opis_strukture_vlasnistva)
        {
            var opis_strukture_vlasnistvaParameter = opis_strukture_vlasnistva != null ?
                new ObjectParameter("Opis_strukture_vlasnistva", opis_strukture_vlasnistva) :
                new ObjectParameter("Opis_strukture_vlasnistva", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Struktura_vlasnistva", opis_strukture_vlasnistvaParameter);
        }
    
        public virtual int Insert_Tip_reklame(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Tip_reklame", nazivParameter);
        }
    
        public virtual int Insert_TV_kuca(Nullable<int> struktura_vlasnistva_ID, string naziv, string sediste, string adresa, string telefon, string email)
        {
            var struktura_vlasnistva_IDParameter = struktura_vlasnistva_ID.HasValue ?
                new ObjectParameter("Struktura_vlasnistva_ID", struktura_vlasnistva_ID) :
                new ObjectParameter("Struktura_vlasnistva_ID", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var sedisteParameter = sediste != null ?
                new ObjectParameter("Sediste", sediste) :
                new ObjectParameter("Sediste", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_TV_kuca", struktura_vlasnistva_IDParameter, nazivParameter, sedisteParameter, adresaParameter, telefonParameter, emailParameter);
        }
    
        public virtual int Insert_Zaposleni(Nullable<int> poz_zaposlenog_ID, Nullable<int> agencija_ID, Nullable<int> nadredjeni_ID, string ime, string prezime, string jMBG, string email, string telefon)
        {
            var poz_zaposlenog_IDParameter = poz_zaposlenog_ID.HasValue ?
                new ObjectParameter("Poz_zaposlenog_ID", poz_zaposlenog_ID) :
                new ObjectParameter("Poz_zaposlenog_ID", typeof(int));
    
            var agencija_IDParameter = agencija_ID.HasValue ?
                new ObjectParameter("Agencija_ID", agencija_ID) :
                new ObjectParameter("Agencija_ID", typeof(int));
    
            var nadredjeni_IDParameter = nadredjeni_ID.HasValue ?
                new ObjectParameter("Nadredjeni_ID", nadredjeni_ID) :
                new ObjectParameter("Nadredjeni_ID", typeof(int));
    
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var jMBGParameter = jMBG != null ?
                new ObjectParameter("JMBG", jMBG) :
                new ObjectParameter("JMBG", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Zaposleni", poz_zaposlenog_IDParameter, agencija_IDParameter, nadredjeni_IDParameter, imeParameter, prezimeParameter, jMBGParameter, emailParameter, telefonParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Transfer_DimVreme_Result> Transfer_DimVreme()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Transfer_DimVreme_Result>("Transfer_DimVreme");
        }
    
        public virtual int Transfer_FactNarudzbine()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Transfer_FactNarudzbine");
        }
    
        public virtual int Transfer_FactReklama()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Transfer_FactReklama");
        }
    }
}
